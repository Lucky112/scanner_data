// high & low
var allTimeHigh = float(na)
allTimeHigh := math.max(nz(allTimeHigh[1], high), high)
var allTimeLow = float(na)
allTimeLow := math.min(nz(allTimeLow[1], low), low)
var firstOpen = open
plot(allTimeHigh, title='High.All')
plot(allTimeLow, title='Low.All')
plot(allTimeHigh, title='High.All.Calc')
plot(allTimeLow, title='Low.All.Calc')
plot(firstOpen, title='Open.All.Calc')
custom_lowest(_x, len, maxbarsback) =>
	x = _x
	if bar_index == 0
		x += x[maxbarsback] * 0  // max_bars_back
	if len == 0
		na
	else if len == 1
		x
	else
		_len = len
		if na(x[len + 1]) != true
			_len -= 1
		res = x
		res := x
		for i = 0 to _len by 1
			res := math.min(res, x[i])
		res
custom_highest(_x, len, maxbarsback) =>
	x = _x
	if bar_index == 0
		x += x[maxbarsback] * 0  // max_bars_back
	if len == 0
		na
	else if len == 1
		x
	else
		_len = len
		if na(x[len + 1]) != true
			_len -= 1
		res = x
		for i = 0 to _len by 1
			res := math.max(res, x[i])
		res

fastSearchN(_xs, x, maxbarsback) =>  // xs - sorted, ascending
	xs = _xs
	if bar_index == 0
		xs += xs[maxbarsback] * 0  // max_bars_back
	left = 0
	right = math.min(bar_index, maxbarsback)
	mid = 0
	if xs < x
		0
	else
		for i = 0 to 9 by 1
			mid := math.ceil((left + right) / 2)
			if left == right
				break
			else if xs[mid] < x
				right := mid
				continue
			else if xs[mid] > x
				left := mid
				continue
			else
				break
		mid



years5 = 365 * 4 + 366
years5_ago = timenow - 1000 * 60 * 60 * 24 * years5
countOfBars5YearAgo = fastSearchN(time, years5_ago, years5)

weeks52 = 7 * 52
weeks52_ago = timenow - 1000 * 60 * 60 * 24 * weeks52
countOfBars52WeekAgo = fastSearchN(time, weeks52_ago, weeks52)
plot(custom_lowest(low, countOfBars52WeekAgo, weeks52), title='price_52_week_low')
plot(custom_highest(high, countOfBars52WeekAgo, weeks52), title='price_52_week_high')

month6 = 180
months6_ago = timenow - 1000 * 60 * 60 * 24 * month6
countOfBars6MonthAgo = fastSearchN(time, months6_ago, month6)
plot(custom_lowest(low, countOfBars6MonthAgo, month6), title='Low.6M')
plot(custom_highest(high, countOfBars6MonthAgo, month6), title='High.6M')

month3 = 90
months3_ago = timenow - 1000 * 60 * 60 * 24 * month3
countOfBars3MonthAgo = fastSearchN(time, months3_ago, month3)
plot(custom_lowest(low, countOfBars3MonthAgo, month3), title='Low.3M')
plot(custom_highest(high, countOfBars3MonthAgo, month3), title='High.3M')

month1 = 30
month_ago = timenow - 1000 * 60 * 60 * 24 * month1
month_ago_this_bar = time - 1000 * 60 * 60 * 24 * month1
countOfBars1MonthAgo = fastSearchN(time, month_ago, month1)
countOfBars1MonthAgoThisBar = fastSearchN(time, month_ago_this_bar, month1)
plot(custom_lowest(low, countOfBars1MonthAgo, month1), title='Low.1M')
plot(custom_highest(high, countOfBars1MonthAgo, month1), title='High.1M')

week1 = 7
week_ago = timenow - 1000 * 60 * 60 * 24 * week1
week_ago_this_bar = time - 1000 * 60 * 60 * 24 * week1
countOfBarsWeekAgo = fastSearchN(time, week_ago, week1)
countOfBarsWeekAgoThisBar = fastSearchN(time, week_ago_this_bar, week1)
plot(custom_lowest(low, countOfBarsWeekAgo, week1), title='Low.5D')
plot(custom_highest(high, countOfBarsWeekAgo, week1), title='High.5D')

// volatility
volatility(bb) =>
	bb2 = bb
	if bar_index == 0
		bb2 := 365
	if bb2 == 0
		na
	else
		s = math.sum((high - low) / math.abs(low) * 100 / bb2, bb2)
		if bb == 0
			na
		else
			s

plot(volatility(countOfBarsWeekAgoThisBar), title='Volatility.W')
plot(volatility(countOfBars1MonthAgoThisBar), title='Volatility.M')
plot(ta.tr(true) * 100 / math.abs(low), title='Volatility.D')

// performance
rateOfreturn(v1, v2) =>
	(v1 - v2) * 100 / math.abs(v2)
rr(_bb, maxbarsback) =>
	bb = _bb
	if bar_index == 0
		bb += math.round(open[maxbarsback] * 0)  // max_bars_back
	if bb == 0
		na
	else
		rof = rateOfreturn(close, open[bb])
		rof

plot(rr(countOfBarsWeekAgo, week1), title='Perf.W')
plot(rr(countOfBars1MonthAgo, month1), title='Perf.1M')
plot(rr(countOfBars3MonthAgo, month3), title='Perf.3M')
plot(rr(countOfBars6MonthAgo, month6), title='Perf.6M')
plot(rr(countOfBars52WeekAgo, weeks52), title='Perf.Y')
plot(rr(countOfBars5YearAgo, years5), title='Perf.5Y')
var lastYearOpen = float(na)
if year > year[1]
	lastYearOpen := open[1]
plot(rateOfreturn(close, lastYearOpen), title='Perf.YTD')
